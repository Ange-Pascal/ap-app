// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  email       String   @unique
  password    String
  phoneNumber String   @unique
  role        Role     @default(CUSTOMER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]

  Address Address[]

  Review Review[]

  Notification Notification[]
}

model Employee {
  id          Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  phone      String   @unique
  role       EmployeeRole
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orders     Order[]   @relation("OrderEmployee")
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  price       Float
  duration    Int      // durée estimée en minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      OrderItem[]
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      Int
  employeeId  Int?
  status      OrderStatus 
  totalPrice  Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  employee    Employee? @relation(fields: [employeeId], references: [id], name: "OrderEmployee")
  orderItems  OrderItem[]
  payments    Payment[]

  Review Review[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  serviceId Int
  quantity  Int     
  subtotal  Float
  order     Order   @relation(fields: [orderId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])
}

model Payment {
  id        Int       @id @default(autoincrement())
  orderId   Int
  amount    Float
  status    PaymentStatus 
  method    PaymentMethod
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order     @relation(fields: [orderId], references: [id])
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id]) 
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  orderId   Int
  rating    Int      
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
}

model Notification {
  id         Int      @id @default(autoincrement())
  userId     Int
  message    String
  isRead     Boolean  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

enum Role {
  CUSTOMER
  ADMIN
}

enum EmployeeRole {
  MANAGER
  DELIVERY
  CLEANER
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  MOBILE_PAYMENT
}
